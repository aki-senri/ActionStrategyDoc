---
description: UE5のコーディング規約
globs: 
alwaysApply: false
---

# プログラミング言語
- C++はUnreal C++

# コーディング
- クラスにはまず public な実装を宣言し、次にクラスの private な実装を行います

# コードの命名規則
- 命名規則を使用する場合、すべてのコードおよびコメントは米国英語のスペルとグラマーを使用しなければなりません。
- 名前に含まれる各用語の最初の文字 (例：型や変数) は大文字とし、通常は用語間にアンダースコアを使用しません。たとえば、Health と UPrimitiveComponent は正しく、lastMouseCoordinates や delta_coordinates は間違いです。
- 型名には大文字をプレフィックスとして追加し、変数名と区別します。たとえば FSkin は型名で、Skin は FSkin のインスタンスとなります。
- テンプレート クラスにはプレフィックス T が付きます。
- UObject から継承されるクラスにはプレフィックス U が付きます。
- AActor から継承されるクラスにはプレフィックス A が付きます。
- SWidget から継承されるクラスにはプレフィックス S が付きます。
- 抽象インターフェースのクラスにはプレフィックス I が付きます。
- Epic の概念に似た構造体型には、プレフィックス C が付いています。例：struct CStaticClassProvider{}
- Enums are prefixed by E. 例：enum class EColorBits{}
- ブール変数には、必ずプレフィックス b を付けてください。
- その他のほとんどのクラスにはプレフィックス F が付きますが、サブシステムによっては別の文字が使用されます。
- Typedef には、次のようにその型に対して適切なプレフィックスが付きます。
  - 構造体の typedef には F
  - UObject の typedef には U
- 特定のテンプレートのインスタンス化の typedef は、テンプレートではなくなり、それに応じてプレフィックスが付きます。例：typedef TArray<FMytype> FArrayOfMyTypes;
- C# ではプレフィックスは省略されます。
- Unreal Header Tool では正しいプレフィックスが必要な場合が多いため、正しいものを使うことが重要です。
- 型テンプレート パラメータと、それらのテンプレート パラメータに基づくネスティングされている型エイリアスは、型カテゴリが不明なため、上記のプレフィックス規則の対象ではありません。
- 説明的な用語の後に型サフィックスを付けることをお勧めします。
- In プレフィックスを使用して、テンプレート パラメータをエイリアスから明確にします。 
- 型と変数の名前には名詞を使用します。
- メソッド名には、その効果を説明する動詞、または効果のないメソッドの戻り値を説明する動詞を使用します。
- マクロ名は、すべて大文字にして単語をアンダースコアで区切り、UE_ をプレフィックスとして付ける必要があります。
- 変数、メソッド、クラス名は次のことを考慮する必要があります。
  - Clear
  - 曖昧でないこと
  - 記述的であること
- 名前のスコープが大きいほど、名前の明確さがより重要となります。過度に名前を省略しないでください。
- 変数の意味をコメントとして付けられるように、変数ごとに行を変えて宣言する必要があります。
- 変数の前のコメントは 1 行でも複数行でもかまいません。
- bool を返すすべての関数は、true または false の質問形式とします。たとえば、IsVisible() や ShouldClearBuffer() です。
- プロシージャ (戻り値のない関数) の名前には、明確な動詞の後にオブジェクトが続きます。ただし、メソッドのオブジェクトがそのメソッドが所属するオブジェクト自体である場合は例外です。その場合はコンテキストからオブジェクトが認識されます。「Handle」や「Process」のような動詞は曖昧になるため、使用は避けてください。
- 次のような場合は、関数パラメータ名にプレフィックスとして「Out」を付けることを推奨します。
- 関数パラメータが参照から渡される場合
- 関数によって値が書かれる場合
- In または Out のパラメータも boolean の場合、bOutResult のように In/Out のプレフィックスの前に「b」を付けます。
- 値を返す関数は、戻り値を名前で説明すべきです。 関数が返す値を名前によって明確にします。 これは特にブール関数で重要です。 以下の 2 通りの例を検討してください。
// what does true mean?
bool CheckTea(FTea Tea);
 
// name makes it clear true means tea is fresh
bool IsTeaFresh(FTea Tea);

float TeaWeight;
int32 TeaCount;
bool bDoesTeaStink;
FName TeaName;
FString TeaFriendlyName;
UClass* TeaClass;
USoundCue* TeaSound;
UTexture* TeaTexture;




